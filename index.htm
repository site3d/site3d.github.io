<!DOCTYPE html>
<html lang="ru">
<head>
  <title>three.js webgl - GLTFloader</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
  <link type="text/css" rel="stylesheet" href="main.css">
</head>
<body>
<script type="importmap">
  {
    "imports": {
      "three": "/three/three.module.js"
    }
  }





</script>

<script type="module">

  import * as THREE from 'three';

  import {OrbitControls} from '/three/addons/controls/OrbitControls.js';
  import {GLTFLoader} from '/three/addons/loaders/GLTFLoader.js';
  import {RGBELoader} from '/three/addons/loaders/RGBELoader.js';

  let camera, scene, renderer;

  init();
  render();

  function init()
  {
    const container = document.createElement('div');
    document.body.appendChild(container);

    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.25, 100);
    camera.position.set(-1.8, 0.6, 2.7);

    scene = new THREE.Scene();

    const ambientLight = new THREE.AmbientLight(0x444444);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(-1, 3, 3);
    directionalLight.castShadow = true;
    directionalLight.shadow.mapSize.height = 1024;
    directionalLight.shadow.mapSize.width = 1024;
    scene.add(directionalLight);

    const plane = new THREE.Mesh(
      new THREE.PlaneGeometry(25, 25),
      new THREE.MeshPhongMaterial({map: new THREE.TextureLoader().load('textures/floor.jpg')})
    )
    plane.rotateX(-Math.PI / 2);
    plane.position.y = -1;
    plane.receiveShadow = true;
    scene.add(plane);

    const ball = new THREE.Mesh(new THREE.SphereGeometry(0.4, 128, 128), new THREE.MeshPhysicalMaterial({
      color: new THREE.Color(0xffffff),
      roughness: 0,
      metalness: 0,
      reflectivity: 1.0,
      transmission: 1.0,
      clearcoat: 1.0,
      clearcoatRoughness: 0.1,
      ior: 1.5,
      thickness: 50.0
    }))
    ball.position.set(0.25, -0.6, 0.75);
    ball.castShadow = true;
    scene.add(ball);

    new RGBELoader()
      .setPath('textures/equirectangular/')
      .load('quarry_01_1k.hdr', function (texture)
      {
        texture.mapping = THREE.EquirectangularReflectionMapping;

        scene.background = texture;
        scene.environment = texture;

        const loader = new GLTFLoader().setPath('models/');
        loader.load('door.glb', function (gltf)
        {
          const model = gltf.scene;

          model.traverse(child =>
          {
            if (child.isMesh)
            {
              child.castShadow = true;
              child.receiveShadow = true;
            }
          });

          scene.add(model);
        });
      });

    renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1;
    renderer.outputEncoding = THREE.sRGBEncoding;
    renderer.shadowMap.enabled = true;
    container.appendChild(renderer.domElement);

    const controls = new OrbitControls(camera, renderer.domElement);
    controls.maxPolarAngle = Math.PI / 2;
    controls.minDistance = 3;
    controls.maxDistance = 10;
    controls.target.set(0, 0, 0);
    controls.update();

    window.addEventListener('resize', onWindowResize);
  }

  function onWindowResize()
  {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  function render()
  {
    renderer.render(scene, camera);
    requestAnimationFrame(render);
  }

</script>
</body>
</html>
